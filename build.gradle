buildscript {
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.2.1.3168")
    }
}

plugins {
    id "jacoco"
    id "java-library"
    id "com.diffplug.spotless" version "6.19.0"
}

group = groupId
version = artifactVersion

subprojects {
    apply plugin: "jacoco"
    apply plugin: "java-library"
    apply plugin: "com.diffplug.spotless"
    apply plugin: "org.sonarqube"

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    group = groupId
    version = artifactVersion

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    dependencies {
        compileOnly "org.jetbrains:annotations:24.0.1"

        testRuntimeOnly "ch.qos.logback:logback-classic:1.4.8"
        testRuntimeOnly libs.junit.engine
        testRuntimeOnly libs.testcontainers.junit
        testImplementation libs.junit.api
        testImplementation libs.junit.params
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization", "goodforgod"
            property "sonar.projectKey", "GoodforGod_testcontainers-extensions-${project.name}"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events("passed", "skipped", "failed")
            exceptionFormat("full")
            showStandardStreams(false)
        }

        reports {
            html.required = false
            junitXml.required = false
        }
    }

    spotless {
        java {
            encoding("UTF-8")
            importOrder()
            removeUnusedImports()
            eclipse("4.21").configFile("${rootDir}/config/codestyle.xml")
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding("UTF-8")
        options.incremental(true)
        options.fork = true
    }

    check.dependsOn jacocoTestReport
    jacocoTestReport {
        reports {
            xml.required = true
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    javadoc {
        options.encoding = "UTF-8"
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "org.sonarqube"

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization", "goodforgod"
            property "sonar.projectKey", "GoodforGod_$artifactRootId"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId = "testcontainers-extensions-$artifactId"

                var nameFromArtifact = artifactId
                pom {
                    url = "https://github.com/GoodforGod/$artifactRootId"
                    name = nameFromArtifact

                    license {
                        name = "Apache License 2.0"
                        url = "https://github.com/GoodforGod/$artifactRootId/blob/master/LICENSE"
                        distribution = "repo"
                    }

                    developer {
                        id = "GoodforGod"
                        name = "Anton Kurako"
                        email = "goodforgod.dev@gmail.com"
                        url = "https://github.com/GoodforGod"
                    }

                    scm {
                        connection = "scm:git:git://github.com/GoodforGod/${artifactRootId}.git"
                        developerConnection = "scm:git:ssh://GoodforGod/${artifactRootId}.git"
                        url = "https://github.com/GoodforGod/$artifactRootId/tree/master"
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username System.getenv("OSS_USERNAME")
                    password System.getenv("OSS_PASSWORD")
                }
            }
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    if (project.hasProperty("signing.keyId")) {
        apply plugin: "signing"
        signing {
            sign publishing.publications.mavenJava
        }
    }
}